static_resources:
  listeners:
  # listener_0 accepts a raw TCP stream from the local TCP client.
  - name: listener_0
    address:
      socket_address:
        protocol: TCP
        address: 127.0.0.1
        port_value: 7777
    filter_chains:
    - filters:
      - name: tcp
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.network.tcp_proxy.v3.TcpProxy
          stat_prefix: tcp_stats
          cluster: cluster_0

  # listener_1 accepts a TCP stream and tunnels it over an HTTP POST stream.
  - name: listener_1
    address:
      socket_address:
        protocol: TCP
        address: 127.0.0.1
        port_value: 11000
    filter_chains:
    - filters:
      - name: tcp
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.network.tcp_proxy.v3.TcpProxy
          stat_prefix: tcp_stats
          cluster: cluster_1
          tunneling_config:
            hostname: CLOUD_RUN_SERVICE_HOSTNAME
            use_post: true

  clusters:
    # cluster_0 proxies a raw TCP stream into a mTLS TCP stream to local listener_1.
    - name: cluster_0
      connect_timeout: 5s
      typed_extension_protocol_options:
        envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
          "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
          explicit_http_config:
            http2_protocol_options: {}
      load_assignment:
        cluster_name: cluster_0
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: 127.0.0.1
                      port_value: 11000
      transport_socket:
        name: envoy.transport_sockets.tls
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
          common_tls_context:
            tls_certificates:
              certificate_chain: { "filename": "/etc/certs/cert.pem" }
              private_key: { "filename": "/etc/certs/key.pem" }

    # cluster_1 proxies HTTP stream with a TLS HTTP/2 stream to Cloud Run.
    - name: cluster_1
      connect_timeout: 5s
      type: LOGICAL_DNS
      typed_extension_protocol_options:
        envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
          "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
          explicit_http_config:
            http2_protocol_options: {}
      load_assignment:
        cluster_name: cluster_1
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: CLOUD_RUN_SERVICE_HOSTNAME
                      port_value: 443
                      # For local testing, use the following IP:port
                      #address: 0.0.0.0
                      #port_value: 8080
      # For local testing, remove the following TLS socket.
      transport_socket:
        name: envoy.transport_sockets.tls
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
          common_tls_context:
            validation_context:
              trusted_ca: { "filename": "/etc/certs/ca-certificates.crt" }
          sni: CLOUD_RUN_SERVICE_HOSTNAME
